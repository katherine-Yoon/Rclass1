> # 데이터 시각화
> # 1 세로 막대 차트
> chart_data <- c(110, 70, 125, 75, 130, 100, 135, 125)
> names(chart_data) <- c("star2016", "sun2016",
+                        "star2017","sun2017",
+                        "star2018","sun2018",
+                        "star2019","sun2019")
> barplot(chart_data, ylim = c(0, 200),
+         col = rainbow(8),
+         main = "star vs sun")
> 
> # 2 세로 막대 차트x와 y에 레이블 추가
> barplot(chart_data, ylim = c(0, 200),
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황", 
+         main = "Star와 Sun의 키 높이 비교")
> 
> # 3 가로 막대 차트
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         col = rainbow(8),
+         main = "Star와 Sun의 키 높이 비교")
> 
> # 4 가로 막대 사이 간격 조절
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         col = rainbow(8), space = 1, cex.names = 0.8,
+         main = "Star와 Sun의 키 높이 비교")
> 
> # 5 가로 막대 색상 지정
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         space = 1, cex.names = 0.8,
+         main = "Star와 Sun의 키 높이 비교",
+         col = rep(c(2,4),4))
> 
> 
> # 6 가로 막대 색상 이름 지정
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         space = 1, cex.names = 0.8,
+         main = "Star와 Sun의 키 높이 비교",
+         col = rep(c("red","green"),4))
> 
> # 데이터 시각화
> # 1 세로 막대 차트
> chart_data <- c(110, 70, 125, 75, 130, 100, 135, 125)
> names(chart_data) <- c("star2016", "sun2016", 
+                        "star2017","sun2017",
+                        "star2018","sun2018",
+                        "star2019","sun2019")
> barplot(chart_data, ylim = c(0, 200),
+         col = rainbow(8),
+         main = "star vs sun")
> 
> # 2 세로 막대 차트x와 y에 레이블 추가
> barplot(chart_data, ylim = c(0, 200),
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         main = "Star와 Sun의 키 높이 비교")
>  
> 
> # 3 가로 막대 차트
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         col = rainbow(8),
+         main = "Star와 Sun의 키 높이 비교")
> 
> # 4 가로 막대 사이 간격 조절
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         col = rainbow(8), space = 1, cex.names = 0.8,
+         main = "Star와 Sun의 키 높이 비교")
> 
> # 5 가로 막대 색상 지정
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+          ylab = "키 높이(단위: cm)",
+          xlab = "년도별 현황",
+          space = 1, cex.names = 0.8,
+          main = "Star와 Sun의 키 높이 비교",
+          col = rep(c(2,4),4))
> 
> # 6 가로 막대 색상 이름 지정
> barplot(chart_data, xlim = c(0, 200), horiz = T,
+         ylab = "키 높이(단위: cm)",
+         xlab = "년도별 현황",
+         space = 1, cex.names = 0.8,
+         main = "Star와 Sun의 키 높이 비교",
+         col = rep(c("red","green"),4))
> 
> 
> 
> # 연속변수 데이터 시각화
> # 1 상자 그래프
> bar_data <- matrix(c(1:16), nrow=4, ncol=4)
> colnames(bar_data) <- c("도시A", "도시B","시골A", "시골B")
> View(bar_data)
> boxplot(bar_data, range = 0)
> 
> # 2 상자 그래프 기준선
> # h : y축 값, lty : 3(점선)
> abline(h = 10, lty = 3, col = "red")
> 
> # 3 히스토그램 iris 꽃받침 길이
> # Sepal.Length: 꽃받침 길이 
> # Sepal.Width: 꽃받침 너비
> # Petal.Length: 꽃잎 길이
> # Petal.Width: 꽃잎 너비
> # Species: 꽃의 종
> data(iris)
> names(iris)
[1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"  "Species"     
> 
> # 4 히스토그램 iris 꽃받침 너비
> summary(iris$Sepal.Length) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.300   5.100   5.800   5.843   6.400   7.900 
> hist(iris$Sepal.Length, xlab = "iris$Sepal.Length", col = "magenta",
+      main = "iris 꽃받침 길이 Histogram", xlim = c(4.3, 7.9))
> 
> # 연속변수 데이터 시각화
> # 1 산점도 시각화
> price <- runif(10, min = 1, max = 100)
> plot(price, col = "red")
> par(new = T)
> line_chart = 1:100
> plot(line_chart, type = "l", col = "red", axes = F, ann = F)
> text(70,80, "대각선 추가", col = "blue")
> 
> 
> # 2 산점도 실선, 원형, 직선, 꺽은선
> par(mfrow = c(2,2))
> plot(price, type = "l")
> plot(price, type = "o")
> plot(price, type = "h")
> plot(price, type = "s")
> 
> 
> # 3 빈 사각형, 채워진 사각형
> plot(price, type = "o", pch = 5)
> plot(price, type = "o", pch = 15)
> plot(price, type = "o", pch = 20, col = "blue")
> plot(price, type = "o", pch = 20, col = "green", cex = 1.5)
> 
> 
> # 4 선의 굵기를 지정
> par(mfrow = c(1,1))
> plot(price, type = "o", pch = 20,
+      col = "green", cex = 2.0, lwd = 3)
> 
> 
> # 고급 시각화 (lattice)
> 
> # 1 barchart 막대 그래프
> # barchart( y축 칼럼 ~ x축 컬럼 | 조건, data)
> bar_data <- matrix(c(1:16), nrow=4, ncol=4)
> colnames(bar_data) <- c("도시A", "도시B","시골A", "시골B")
> View(bar_data)
> #install.packages("lattice")
> library(lattice)
> dftable <-as.data.frame.table(bar_data)
> dftable
   Var1  Var2 Freq
1     A 도시A    1
2     B 도시A    2
3     C 도시A    3
4     D 도시A    4
5     A 도시B    5
6     B 도시B    6
7     C 도시B    7
8     D 도시B    8
9     A 시골A    9
10    B 시골A   10
11    C 시골A   11
12    D 시골A   12
13    A 시골B   13
14    B 시골B   14
15    C 시골B   15
16    D 시골B   16
> 
> barchart(Var1 ~ Freq | Var2, data = dftable, layout = c(4,1))
> 
> 
> # 2 점 그래프
> dotplot(Var1 ~ Freq | Var2, dftable)
> 
> 
> # 3 점선 그래프
> # type: "o" 점 타입으로 원형에 실선이 통과하는 유형
> # auto.key : 범례를 나타내며, 그래프 오른쪽이며, 점과 선을 범례에 표시함
> dotplot(Var1 ~ Freq, data = dftable, 
+         groups = Var2, type = "o",
+         auto.key = list(space = "right", points = T, lines = T))
> 
> 
> # 4 산점도 그래프
> # Ozone (오존), Solar.R(태양열), Wind(바람)
> # Temp(온도), Month(월5~9), Day(일1~31)
> library(datasets)
> airquality
    Ozone Solar.R Wind Temp Month Day
1      41     190  7.4   67     5   1
2      36     118  8.0   72     5   2
3      12     149 12.6   74     5   3
4      18     313 11.5   62     5   4
5      NA      NA 14.3   56     5   5
6      28      NA 14.9   66     5   6
7      23     299  8.6   65     5   7
8      19      99 13.8   59     5   8
9       8      19 20.1   61     5   9
10     NA     194  8.6   69     5  10
11      7      NA  6.9   74     5  11
12     16     256  9.7   69     5  12
13     11     290  9.2   66     5  13
14     14     274 10.9   68     5  14
15     18      65 13.2   58     5  15
16     14     334 11.5   64     5  16
17     34     307 12.0   66     5  17
18      6      78 18.4   57     5  18
19     30     322 11.5   68     5  19
20     11      44  9.7   62     5  20
21      1       8  9.7   59     5  21
22     11     320 16.6   73     5  22
23      4      25  9.7   61     5  23
24     32      92 12.0   61     5  24
25     NA      66 16.6   57     5  25
26     NA     266 14.9   58     5  26
27     NA      NA  8.0   57     5  27
28     23      13 12.0   67     5  28
29     45     252 14.9   81     5  29
30    115     223  5.7   79     5  30
31     37     279  7.4   76     5  31
32     NA     286  8.6   78     6   1
33     NA     287  9.7   74     6   2
34     NA     242 16.1   67     6   3
35     NA     186  9.2   84     6   4
36     NA     220  8.6   85     6   5
37     NA     264 14.3   79     6   6
38     29     127  9.7   82     6   7
39     NA     273  6.9   87     6   8
40     71     291 13.8   90     6   9
41     39     323 11.5   87     6  10
42     NA     259 10.9   93     6  11
43     NA     250  9.2   92     6  12
44     23     148  8.0   82     6  13
45     NA     332 13.8   80     6  14
46     NA     322 11.5   79     6  15
47     21     191 14.9   77     6  16
48     37     284 20.7   72     6  17
49     20      37  9.2   65     6  18
50     12     120 11.5   73     6  19
51     13     137 10.3   76     6  20
52     NA     150  6.3   77     6  21
53     NA      59  1.7   76     6  22
54     NA      91  4.6   76     6  23
55     NA     250  6.3   76     6  24
56     NA     135  8.0   75     6  25
57     NA     127  8.0   78     6  26
58     NA      47 10.3   73     6  27
59     NA      98 11.5   80     6  28
60     NA      31 14.9   77     6  29
61     NA     138  8.0   83     6  30
62    135     269  4.1   84     7   1
63     49     248  9.2   85     7   2
64     32     236  9.2   81     7   3
65     NA     101 10.9   84     7   4
66     64     175  4.6   83     7   5
67     40     314 10.9   83     7   6
68     77     276  5.1   88     7   7
69     97     267  6.3   92     7   8
70     97     272  5.7   92     7   9
71     85     175  7.4   89     7  10
72     NA     139  8.6   82     7  11
73     10     264 14.3   73     7  12
74     27     175 14.9   81     7  13
75     NA     291 14.9   91     7  14
76      7      48 14.3   80     7  15
77     48     260  6.9   81     7  16
78     35     274 10.3   82     7  17
79     61     285  6.3   84     7  18
80     79     187  5.1   87     7  19
81     63     220 11.5   85     7  20
82     16       7  6.9   74     7  21
83     NA     258  9.7   81     7  22
84     NA     295 11.5   82     7  23
85     80     294  8.6   86     7  24
86    108     223  8.0   85     7  25
87     20      81  8.6   82     7  26
88     52      82 12.0   86     7  27
89     82     213  7.4   88     7  28
90     50     275  7.4   86     7  29
91     64     253  7.4   83     7  30
92     59     254  9.2   81     7  31
93     39      83  6.9   81     8   1
94      9      24 13.8   81     8   2
95     16      77  7.4   82     8   3
96     78      NA  6.9   86     8   4
97     35      NA  7.4   85     8   5
98     66      NA  4.6   87     8   6
99    122     255  4.0   89     8   7
100    89     229 10.3   90     8   8
101   110     207  8.0   90     8   9
102    NA     222  8.6   92     8  10
103    NA     137 11.5   86     8  11
104    44     192 11.5   86     8  12
105    28     273 11.5   82     8  13
106    65     157  9.7   80     8  14
107    NA      64 11.5   79     8  15
108    22      71 10.3   77     8  16
109    59      51  6.3   79     8  17
110    23     115  7.4   76     8  18
111    31     244 10.9   78     8  19
112    44     190 10.3   78     8  20
113    21     259 15.5   77     8  21
114     9      36 14.3   72     8  22
115    NA     255 12.6   75     8  23
116    45     212  9.7   79     8  24
117   168     238  3.4   81     8  25
118    73     215  8.0   86     8  26
119    NA     153  5.7   88     8  27
120    76     203  9.7   97     8  28
121   118     225  2.3   94     8  29
122    84     237  6.3   96     8  30
123    85     188  6.3   94     8  31
124    96     167  6.9   91     9   1
125    78     197  5.1   92     9   2
126    73     183  2.8   93     9   3
127    91     189  4.6   93     9   4
128    47      95  7.4   87     9   5
129    32      92 15.5   84     9   6
130    20     252 10.9   80     9   7
131    23     220 10.3   78     9   8
132    21     230 10.9   75     9   9
133    24     259  9.7   73     9  10
134    44     236 14.9   81     9  11
135    21     259 15.5   76     9  12
136    28     238  6.3   77     9  13
137     9      24 10.9   71     9  14
138    13     112 11.5   71     9  15
139    46     237  6.9   78     9  16
140    18     224 13.8   67     9  17
141    13      27 10.3   76     9  18
142    24     238 10.3   68     9  19
143    16     201  8.0   82     9  20
144    13     238 12.6   64     9  21
145    23      14  9.2   71     9  22
146    36     139 10.3   81     9  23
147     7      49 10.3   69     9  24
148    14      20 16.6   63     9  25
149    30     193  6.9   70     9  26
150    NA     145 13.2   77     9  27
151    14     191 14.3   75     9  28
152    18     131  8.0   76     9  29
153    20     223 11.5   68     9  30
> xyplot(Ozone ~ Wind, data = airquality)
> 
> 
> # 5 산점도 패널 제목
> # factor는 변수의 순서대로 levels 값이 그대로 패널의 제목으로 보임
> convert <- transform(airquality, Month = factor(Month))
> xyplot(Ozone ~ Wind | Month, data = convert, layout = c(5,1))
> 
> 
> # 6 동일한 패널에 두 개의 변수값 표현
> xyplot(Ozone + Solar.R ~ Wind | factor(Month),
+        data = airquality,
+        col = c("blue", "red"),
+        layout = c(5, 1))
> 
> 
> # 7 지진 산점도
> # lat(위도), long(경도), dapth(수심, km)
> # mag(리히터 규모), stations(관측소)
> head(quakes)
     lat   long depth mag stations depth2
1 -20.42 181.62   562 4.8       41      6
2 -20.62 181.03   650 4.2       15      6
3 -26.00 184.10    42 5.4       43      1
4 -17.97 181.66   626 4.1       19      6
5 -20.42 181.96   649 4.0       11      6
6 -19.68 184.31   195 4.0       12      2
> 
> xyplot(lat ~ long, data = quakes, pch = ".")
> 
> 
> # 8 선점도에 제목 추가
> tplot <- xyplot(lat ~ long, data = quakes, pch = ".")
> tplot <- update(tplot, main ="태평양에서 발생한 지진 위치")
> print(tplot)
> 
> 
> # 9 범주를 6개로 나누어서 시각화
> range(quakes$depth)
[1]  40 680
> quakes$depth2[quakes$depth >= 40 & quakes$depth <= 150] <- 1
> quakes$depth2[quakes$depth >= 151 & quakes$depth <= 250] <- 2
> quakes$depth2[quakes$depth >= 251 & quakes$depth <= 350] <- 3
> quakes$depth2[quakes$depth >= 351 & quakes$depth <= 450] <- 4
> quakes$depth2[quakes$depth >= 451 & quakes$depth <= 550] <- 5
> quakes$depth2[quakes$depth >= 551 & quakes$depth <= 680] <- 6
> convert <- transform(quakes, depth2 = factor(depth2))
> xyplot(lat ~ long | depth2, data = convert)
> 
> 
> # 10 지진의 깊이를 5개 영역으로 범주화
> # 첫번째는 39.5 ~ 80.5 km 수심에서 발생한 진앙을 의미함
> depthgroup <- equal.count(quakes$depth, number = 5, overlap = 0)
> depthgroup

Data:
   [1] 562 650  42 626 649 195  82 194 211 622 583 249 554 600 139 306  50 590 570 598 576 211 512 125 431 537 155
  [28] 498 582 328 553  50 292 349  48 600 206 574 585 230 263  96 511  94 246  56 329  70 493 129 554 223  46 593
  [55] 489 562 445 584 535 530 582 260 613  84 593 286 587 627 530  40 152 201  96 506 546 564 197 265 323 304  75
  [82] 367 579 284 450 170 117 538 123  69 128 236 497 271 224 375 365 306  50 484 108 583 608  72 636 293  42 100
 [109]  42 146 280 388 477 617 606 609  46  64 178 248  82  81 606 571 328  49 517 600  94 307 189 527  63 510 624
 [136]  53  42 199 149 210 658 582 220 205 614 186  97  48 462 573  56 127 229 112 140 597  69 452  93 103 626 504
 [163] 202  42  59  40 205 244 553 239 640 434 627  99 399 216 544 206 542 339 640  67 161 375 534  45 309 576 523
 [190] 290 234 223 569 605 422 637 204 175 538 595 360 445 367 190 629 261 603 508 350 533 411 338 226  93 535 573
 [217] 186 618 242 342  90 130  65 397 505  71 207 154 232 106 664 397 431  57 525 574  74 617  44 470 298 148  48
 [244] 107 218 597 619  46 553 150 180  97 587 106 179 680 304 254 521 526 270 548 158 562 300  65 130  82 482 607
 [271] 105 590 498 504 577 529 528 492 561 579 413 565 138 383 260 522 671 123 572 529 641  67 546 507 158 148 562
 [298] 601 175 260 654 242 126 555 637 500 515 583 501  55 644 641 442 464 200 479 497 218 492 325 123 210 575 129
 [325]  74  49 483  93 118  83  61 534  42 219 544  56  68  69  45  43  65  80  51  68  69 103  61  69  51  55  54
 [352]  59 573  56  65 587 150 403  60 130 590 135 583 406 221  40 502 103 423 158 527 219 536 630 249  48 553 112
 [379] 153 130 188 226 124 204 605 221 573 401 195  56 102  44 556 417 591 646 565  52 535 641  41 109  40 548 118
 [406] 593 492 123 475 153 112  99  66 481 139 211 151 211 246  47 484 119  70 579  57 176 602 488 149 546 343 530
 [433] 563 537 325  80 259 476 499 257 165 136 146 524  82  90 138 499 538 467 184 538  45 237 162 136 604 107 538
 [460] 639  45 636 628 632 215 556 135 297 568 168 269 143  95 142 104 169  65  54 474 125 617 294 180  47 593  94
 [487] 201 537 594 638  80 211 520 384 223  54  57  49 508 242  62  63 203 132 543 589  51  45  63 485  66  58  70
 [514] 541 598  50 102 144  58 460  69 570  70 137  41 586 140 213 393  51  64  45 296  50  44  68 549 150  47 543
 [541]  40 100  85  98  58 125  89 590  49 543 506  40  42  76  63 104  93  64 587  83 579  40  62 273 393 264 174
 [568] 574 309  75 195  44 420  63 609  40 575 559 405  70  41 605 130 577 599  82  50 480 559 566 611 409 209  70
 [595]  74 134 150 406 243  89  53  68 605 615 546 176  52  66 377 186  51  67 234 597  64 511  47  49 546  75  60
 [622] 278 550 518 116 518  75 491  56 376 584  48  53 617 294 417 280 332  85 525 613 182  57  79 595 164 148  82
 [649] 153 556 649 651  93 533 642  47 548 154 627 622 286 390 624 539 624 631 631 299 498 255 539 195 594 573 128
 [676] 137 143 511 564 559 248 210 390 616  98 218 655 356 564 548 655 385 518 598 476 579 603 249 208 587 221 545
 [703] 586 488 246  61 524 104 271 487  83 183  55 166 586 618 524 133 201 383  86 555 605 609 204 287 390 348 550
 [730] 487 578 361 275 498 162  78 134 554 608 367 599  45  50 162 302  57 203  66 591 440 611  57 627  89 500 264
 [757] 127  85  50  75 182 619 223 156  46  50 230 184 188  80  86 391 199 592 595 618 213 616 175 589  83 119  70
 [784]  74  40  87  63 537  47 490 593 644 576 199 589 178 248 500  71 568  42 510  97 663 625 210 557 582 402 474
 [811] 577  56  43 118 544 532 237 111 595 603 505 100 587 364 100 350 228  93  66 225 334  70 220 397 326 121 209
 [838] 510  54 242 574  82 102  43 432 580 464 479 581 513  77  68  71  68 586 243 658 315 210 278 638 615 567 560
 [865]  99 266 397 180  40 242 530 133  62 580 530 566 501 548 587 592 221 560  94 139 162 562 204  56  49 100 231
 [892] 601  42 180 559 524  69 594 262 538 331  48  47 558 524 545 477 129 268 117 541 112 162 609  76  61 202  90
 [919] 133 589 190 138 598 600 162 626 137  57 201  69 219 553 524  51 107  44 574 128 568 583 622 193 544 118  51
 [946]  63 442  87  61  60 561 138 174 543 530 497  63  82 605 234  41  40 137 223 109 595 512 613  60  43 172  54
 [973]  68 217 102 178 251  42 575  43 577  42  75  71  60 291 125  69 614 108 575 409 243 642  45 470 248 244  40
[1000] 165

Intervals:
    min   max count
1  39.5  80.5   203
2  79.5 186.5   203
3 185.5 397.5   203
4 396.5 562.5   202
5 562.5 680.5   200

Overlap between adjacent intervals:
[1] 4 3 4 0
> 
> 
> xyplot(lat ~ long | depthgroup, data = quakes, 
+        main = "Earthquakes(depthgroup)",
+        ylab = "latitude", xlab = "longitude", 
+        pch = "@", col = "red")
> 
> 
> # 11 3차원으로 산점도
> cloud(depth ~ lat * long, data = quakes, 
+       zlim = rev(range(quakes$depth)),
+       xlab = "경도", ylab = "위도", zlab = "깊이")
> 
> 
> 
> # 12 3차원 회전속성 산점도
> # z축 방향으로 45회 회전, x축 반대방향으로 25도 회전
> cloud(depth ~ lat * long, data = quakes,
+       zlim = rev(range(quakes$depth)),
+       screen = list(z = 45, x = -25),
+       main = "3차원 산점도",
+       xlab = "경도", ylab = "위도", zlab = "깊이")
> 
> 
> 
> # 고급 시각화 (ggplot2)
> #1 막대 그래프
> #install.packages("ggplot2")
> library(ggplot2)
> data(mpg)
> table(mpg$drv)

  4   f   r 
103 106  25 
> qplot(hwy, data = mpg, fill = drv)
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> # 2 폭 크기 조절 막대 그래프
> # binwidth 막대의 폭 크기 조절
> qplot(hwy, data = mpg, fill = drv, binwidth = 2)
> 
> # 3 구동방식에 따른 분류
> # facets = drv ~ . 행단위로패널이 생성한 그래프
> qplot(hwy, data = mpg, fill = drv, facets = drv ~ ., binwidth = 2)
> 
> # 4 두 개 변수 대상으로 qplot 함수 적용
> # 엔진크기가 작고, 전륜구동(f) 방식인 경우 고속도로 주행 마일 수가 더 좋음
> qplot(displ, hwy, data = mpg)
> 
> # 5 서울 지도 시각화
> library(ggplot2)
> #install.packages("ggmap")
> library(ggmap)
> seoul <- c(left = 126.77, bottom = 37.40,
+            right = 127.17, top = 37.70)
> map <- get_stamenmap(seoul, zoom = 12, maptype = 'terrain')
> ggmap(map)
> 
> 
> # 6 대한민국 2019년 인구수 
> # 대구 중심
> pop <- read.csv(file = "c:/rwork/rstudio-master/data/011population201901.csv", header = T)
> library(stringr)
> region <- pop$'지역명'
> lon <- pop$LON
> lat <- pop$LAT
> tot_pop <- as.numeric(str_replace_all(pop$'총인구수', ',', ''))
> df <- data.frame(region, lon, lat, tot_pop)
> df
             region      lon      lat  tot_pop
1      서울특별시   126.9895 37.56510  9766288
2      부산광역시   129.0447 35.16277  3438259
3      대구광역시   128.5667 35.87975  2460382
4      인천광역시   126.7052 37.45622  2955916
5      광주광역시   126.8515 35.16008  1459832
6      대전광역시   127.3888 36.37310  1488725
7      울산광역시   129.3114 35.53874  1154786
8    세종특별자치시 127.2908 36.48086   316814
9          경기도   127.5293 37.42184 13090648
10         강원도   128.2039 37.86652  1541693
11       충청북도   127.4914 36.63740  1599155
12       충청남도   126.7989 36.52127  2125797
13       전라북도   127.1114 35.82100  1834532
14       전라남도   126.4629 34.81621  1878904
15       경상북도   128.6893 36.35658  2674005
16       경상남도   128.3910 35.22106  3373214
17 제주특별자치도   126.4983 33.48901   667337
18             전체       NA       NA 51826287
> df <- df[1:17, ]
> df
             region      lon      lat  tot_pop
1      서울특별시   126.9895 37.56510  9766288
2      부산광역시   129.0447 35.16277  3438259
3      대구광역시   128.5667 35.87975  2460382
4      인천광역시   126.7052 37.45622  2955916
5      광주광역시   126.8515 35.16008  1459832
6      대전광역시   127.3888 36.37310  1488725
7      울산광역시   129.3114 35.53874  1154786
8    세종특별자치시 127.2908 36.48086   316814
9          경기도   127.5293 37.42184 13090648
10         강원도   128.2039 37.86652  1541693
11       충청북도   127.4914 36.63740  1599155
12       충청남도   126.7989 36.52127  2125797
13       전라북도   127.1114 35.82100  1834532
14       전라남도   126.4629 34.81621  1878904
15       경상북도   128.6893 36.35658  2674005
16       경상남도   128.3910 35.22106  3373214
17 제주특별자치도   126.4983 33.48901   667337
> daegu <- c(left = 123.4423013, bottom = 32.8528306,
+            right = 131.601445, top = 38.8714354)
> map <- get_stamenmap(daegu, zoom = 7, maptype = 'watercolor')
> layer1 <- ggmap(map)
> layer1
> 
> 
> # 7 전체 인구수 시각화 
> layer3 <- layer1+geom_text(data = df,
+                            aes(x = lon + 0.01, y = lat + 0.08,
+                                label = region), size = 3)
> layer3
> 
> # 8 파일로 저장
> # scale : 크기 
> ggsave("pop201901.png", scale = 1, width = 10.24, height = 7.68)
> 
> # KoNLP 이미 설치 되어있음
> library(KoNLP)
